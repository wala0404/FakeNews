<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/frontend/.env">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/frontend/.env" />
              <option name="originalContent" value="import api from &quot;./client&quot;;&#10;&#10;export const classifyNews = async (text) =&gt; {&#10;  const res = await api.post(&quot;/api/classify&quot;, { text });&#10;  return res.data;&#10;};&#10;&#10;export const ocrImage = async (file) =&gt; {&#10;  const formData = new FormData();&#10;  formData.append(&quot;file&quot;, file);&#10;  const res = await api.post(&quot;/api/ocr&quot;, formData, {&#10;    headers: { &quot;Content-Type&quot;: &quot;multipart/form-data&quot; },&#10;  });&#10;  return res.data;&#10;};&#10;&#10;export const getRecommendations = async () =&gt; {&#10;  const res = await api.get(&quot;/api/recommend&quot;);&#10;  return res.data.articles;&#10;};&#10;&#10;" />
              <option name="updatedContent" value="VITE_API_URL=http://localhost:8000" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/frontend/src/App.jsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/frontend/src/App.jsx" />
              <option name="updatedContent" value="import React from &quot;react&quot;;&#10;import { BrowserRouter, Routes, Route, Link } from &quot;react-router-dom&quot;;&#10;import Feed from &quot;./pages/Feed&quot;;&#10;import Verify from &quot;./pages/Verify&quot;;&#10;&#10;function App() {&#10;  return (&#10;    &lt;BrowserRouter&gt;&#10;      &lt;nav className=&quot;bg-gray-800 p-4 text-white flex justify-between&quot;&gt;&#10;        &lt;div className=&quot;font-bold&quot;&gt;FakeNews Platform&lt;/div&gt;&#10;        &lt;div&gt;&#10;          &lt;Link className=&quot;mr-4&quot; to=&quot;/&quot;&gt;Feed&lt;/Link&gt;&#10;          &lt;Link to=&quot;/verify&quot;&gt;Verify&lt;/Link&gt;&#10;        &lt;/div&gt;&#10;      &lt;/nav&gt;&#10;      &lt;Routes&gt;&#10;        &lt;Route path=&quot;/&quot; element={&lt;Feed /&gt;} /&gt;&#10;        &lt;Route path=&quot;/verify&quot; element={&lt;Verify /&gt;} /&gt;&#10;      &lt;/Routes&gt;&#10;    &lt;/BrowserRouter&gt;&#10;  );&#10;}&#10;&#10;export default App;&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/frontend/src/api/client.js">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/frontend/src/api/client.js" />
              <option name="updatedContent" value="import axios from &quot;axios&quot;;&#10;&#10;const api = axios.create({&#10;  baseURL: import.meta.env.VITE_API_URL || &quot;http://localhost:8000&quot;,&#10;  headers: {&#10;    &quot;Content-Type&quot;: &quot;application/json&quot;,&#10;  },&#10;});&#10;&#10;export default api;&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/frontend/src/api/news.js">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/frontend/src/api/news.js" />
              <option name="updatedContent" value="import api from &quot;./client&quot;;&#10;&#10;export const classifyNews = async (text) =&gt; {&#10;  const res = await api.post(&quot;/api/classify&quot;, { text });&#10;  return res.data;&#10;};&#10;&#10;export const ocrImage = async (file) =&gt; {&#10;  const formData = new FormData();&#10;  formData.append(&quot;file&quot;, file);&#10;  const res = await api.post(&quot;/api/ocr&quot;, formData, {&#10;    headers: { &quot;Content-Type&quot;: &quot;multipart/form-data&quot; },&#10;  });&#10;  return res.data;&#10;};&#10;&#10;export const getRecommendations = async () =&gt; {&#10;  const res = await api.get(&quot;/api/recommend&quot;);&#10;  return res.data.articles;&#10;};&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/frontend/src/components/ArticleCard.jsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/frontend/src/components/ArticleCard.jsx" />
              <option name="updatedContent" value="import React from &quot;react&quot;;&#10;&#10;const ArticleCard = ({ article }) =&gt; (&#10;  &lt;div className=&quot;bg-white rounded shadow p-4 mb-4&quot;&gt;&#10;    &lt;h2 className=&quot;text-lg font-bold&quot;&gt;{article.title}&lt;/h2&gt;&#10;    &lt;p className=&quot;text-gray-700&quot;&gt;{article.content}&lt;/p&gt;&#10;    {article.url &amp;&amp; (&#10;      &lt;a href={article.url} className=&quot;text-blue-500 underline&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;&#10;        Read more&#10;      &lt;/a&gt;&#10;    )}&#10;  &lt;/div&gt;&#10;);&#10;&#10;export default ArticleCard;&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/frontend/src/components/UploadBox.jsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/frontend/src/components/UploadBox.jsx" />
              <option name="updatedContent" value="import React from &quot;react&quot;;&#10;&#10;const UploadBox = ({ onFileChange }) =&gt; (&#10;  &lt;div className=&quot;flex flex-col items-center border-2 border-dashed border-gray-400 p-4 rounded mb-4&quot;&gt;&#10;    &lt;input type=&quot;file&quot; accept=&quot;image/*&quot; onChange={e =&gt; onFileChange(e.target.files[0])} /&gt;&#10;    &lt;p className=&quot;text-gray-500 mt-2&quot;&gt;Upload an image to extract text (OCR)&lt;/p&gt;&#10;  &lt;/div&gt;&#10;);&#10;&#10;export default UploadBox;&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/frontend/src/index.css">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/frontend/src/index.css" />
              <option name="updatedContent" value="@tailwind base;&#10;@tailwind components;&#10;@tailwind utilities;&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/frontend/src/main.jsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/frontend/src/main.jsx" />
              <option name="updatedContent" value="import React from &quot;react&quot;;&#10;import ReactDOM from &quot;react-dom/client&quot;;&#10;import App from &quot;./App&quot;;&#10;import &quot;./index.css&quot;;&#10;&#10;ReactDOM.createRoot(document.getElementById(&quot;root&quot;)).render(&#10;  &lt;React.StrictMode&gt;&#10;    &lt;App /&gt;&#10;  &lt;/React.StrictMode&gt;&#10;);&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/frontend/src/pages/Feed.jsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/frontend/src/pages/Feed.jsx" />
              <option name="updatedContent" value="import React, { useEffect, useState } from &quot;react&quot;;&#10;import { getRecommendations } from &quot;../api/news&quot;;&#10;import ArticleCard from &quot;../components/ArticleCard&quot;;&#10;&#10;const Feed = () =&gt; {&#10;  const [articles, setArticles] = useState([]);&#10;  useEffect(() =&gt; {&#10;    getRecommendations().then(setArticles);&#10;  }, []);&#10;  return (&#10;    &lt;div className=&quot;max-w-2xl mx-auto mt-8&quot;&gt;&#10;      &lt;h1 className=&quot;text-2xl font-bold mb-4&quot;&gt;Recommended News&lt;/h1&gt;&#10;      {articles.map((a, i) =&gt; (&#10;        &lt;ArticleCard key={i} article={a} /&gt;&#10;      ))}&#10;    &lt;/div&gt;&#10;  );&#10;};&#10;&#10;export default Feed;&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/frontend/src/pages/Verify.jsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/frontend/src/pages/Verify.jsx" />
              <option name="updatedContent" value="import React, { useState } from &quot;react&quot;;&#10;import { classifyNews, ocrImage } from &quot;../api/news&quot;;&#10;import UploadBox from &quot;../components/UploadBox&quot;;&#10;&#10;const Verify = () =&gt; {&#10;  const [text, setText] = useState(&quot;&quot;);&#10;  const [ocrResult, setOcrResult] = useState(&quot;&quot;);&#10;  const [result, setResult] = useState(null);&#10;  const [loading, setLoading] = useState(false);&#10;&#10;  const handleClassify = async () =&gt; {&#10;    setLoading(true);&#10;    const res = await classifyNews(text);&#10;    setResult(res);&#10;    setLoading(false);&#10;  };&#10;&#10;  const handleFile = async (file) =&gt; {&#10;    setLoading(true);&#10;    const ocr = await ocrImage(file);&#10;    setOcrResult(ocr.text);&#10;    setText(ocr.text);&#10;    setLoading(false);&#10;  };&#10;&#10;  return (&#10;    &lt;div className=&quot;max-w-xl mx-auto mt-8&quot;&gt;&#10;      &lt;h1 className=&quot;text-2xl font-bold mb-4&quot;&gt;Verify News&lt;/h1&gt;&#10;      &lt;textarea&#10;        className=&quot;w-full border rounded p-2 mb-2&quot;&#10;        rows={5}&#10;        placeholder=&quot;Paste news text here or use OCR below...&quot;&#10;        value={text}&#10;        onChange={e =&gt; setText(e.target.value)}&#10;      /&gt;&#10;      &lt;UploadBox onFileChange={handleFile} /&gt;&#10;      &lt;button&#10;        className=&quot;bg-blue-600 text-white px-4 py-2 rounded&quot;&#10;        onClick={handleClassify}&#10;        disabled={loading || !text}&#10;      &gt;&#10;        {loading ? &quot;Processing...&quot; : &quot;Classify&quot;}&#10;      &lt;/button&gt;&#10;      {result &amp;&amp; (&#10;        &lt;div className=&quot;mt-4 p-4 bg-gray-100 rounded&quot;&gt;&#10;          &lt;div&gt;Label: &lt;b&gt;{result.label}&lt;/b&gt;&lt;/div&gt;&#10;          &lt;div&gt;Score: {result.score.toFixed(3)}&lt;/div&gt;&#10;        &lt;/div&gt;&#10;      )}&#10;      {ocrResult &amp;&amp; (&#10;        &lt;div className=&quot;mt-2 text-sm text-gray-500&quot;&gt;OCR Text: {ocrResult}&lt;/div&gt;&#10;      )}&#10;    &lt;/div&gt;&#10;  );&#10;};&#10;&#10;export default Verify;&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/frontend/tailwind.config.js">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/frontend/tailwind.config.js" />
              <option name="originalContent" value="/** @type {import('tailwindcss').Config} */&#10;export default {&#10;  content: [&#10;    &quot;./index.html&quot;,&#10;    &quot;./src/**/*.{js,jsx,ts,tsx}&quot;,&#10;  ],&#10;  theme: {&#10;    extend: {},&#10;  },&#10;  plugins: [],&#10;};&#10;&#10;" />
              <option name="updatedContent" value="/** @type {import('tailwindcss').Config} */&#10;export default {&#10;  content: [&#10;    &quot;./index.html&quot;,&#10;    &quot;./src/**/*.{html,css,js}&quot;,&#10;  ],&#10;  theme: {&#10;    extend: {},&#10;  },&#10;  plugins: [],&#10;};" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/frontend2/app.js">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/frontend2/app.js" />
              <option name="originalContent" value="// app.js for FakeNews Platform (Vanilla JS)&#10;&#10;const mainContent = document.getElementById('main-content');&#10;&#10;function renderFeed() {&#10;  mainContent.innerHTML = `&#10;    &lt;h1&gt;Recommended News&lt;/h1&gt;&#10;    &lt;div id=&quot;articles&quot;&gt;&lt;/div&gt;&#10;  `;&#10;  fetch('http://localhost:8000/api/recommend')&#10;    .then(res =&gt; res.json())&#10;    .then(articles =&gt; {&#10;      const articlesDiv = document.getElementById('articles');&#10;      articlesDiv.innerHTML = articles.map(article =&gt; `&#10;        &lt;div class=&quot;card&quot;&gt;&#10;          &lt;h2&gt;${article.title}&lt;/h2&gt;&#10;          &lt;p&gt;${article.content}&lt;/p&gt;&#10;          ${article.url ? `&lt;a href=&quot;${article.url}&quot; target=&quot;_blank&quot;&gt;Read more&lt;/a&gt;` : ''}&#10;        &lt;/div&gt;&#10;      `).join('');&#10;    });&#10;}&#10;&#10;function renderVerify() {&#10;  mainContent.innerHTML = `&#10;    &lt;h1&gt;Verify News&lt;/h1&gt;&#10;    &lt;textarea id=&quot;news-text&quot; rows=&quot;5&quot; style=&quot;width:100%;margin-bottom:1rem;&quot;&gt;&lt;/textarea&gt;&#10;    &lt;div class=&quot;upload-box&quot;&gt;&#10;      &lt;input type=&quot;file&quot; id=&quot;ocr-file&quot; accept=&quot;image/*&quot;&gt;&#10;      &lt;p&gt;Upload an image to extract text (OCR)&lt;/p&gt;&#10;      &lt;button class=&quot;button&quot; id=&quot;ocr-only-btn&quot; style=&quot;margin-top:0.5rem;&quot;&gt;Read Text from Image&lt;/button&gt;&#10;    &lt;/div&gt;&#10;    &lt;button class=&quot;button&quot; id=&quot;classify-btn&quot;&gt;Classify&lt;/button&gt;&#10;    &lt;div id=&quot;verify-result&quot; style=&quot;margin-top:1rem;&quot;&gt;&lt;/div&gt;&#10;    &lt;div id=&quot;ocr-result&quot; style=&quot;margin-top:0.5rem;color:#6b7280;&quot;&gt;&lt;/div&gt;&#10;  `;&#10;  document.getElementById('classify-btn').onclick = () =&gt; {&#10;    const text = document.getElementById('news-text').value;&#10;    if (!text) return;&#10;    document.getElementById('verify-result').textContent = 'Processing...';&#10;    fetch('http://localhost:8000/api/classify', {&#10;      method: 'POST',&#10;      headers: { 'Content-Type': 'application/json' },&#10;      body: JSON.stringify({ text })&#10;    })&#10;      .then(res =&gt; res.json())&#10;      .then(result =&gt; {&#10;        document.getElementById('verify-result').innerHTML = `&#10;          &lt;div&gt;Label: &lt;b&gt;${result.label}&lt;/b&gt;&lt;/div&gt;&#10;          &lt;div&gt;Score: ${result.score.toFixed(3)}&lt;/div&gt;&#10;        `;&#10;      });&#10;  };&#10;  document.getElementById('ocr-only-btn').onclick = () =&gt; {&#10;    const fileInput = document.getElementById('ocr-file');&#10;    const file = fileInput.files[0];&#10;    if (!file) {&#10;      document.getElementById('ocr-result').textContent = 'Please select an image first.';&#10;      return;&#10;    }&#10;    const formData = new FormData();&#10;    formData.append('file', file);&#10;    document.getElementById('ocr-result').textContent = 'Processing...';&#10;    fetch('http://localhost:8000/api/ocr', {&#10;      method: 'POST',&#10;      body: formData&#10;    })&#10;      .then(res =&gt; res.json())&#10;      .then(data =&gt; {&#10;        document.getElementById('ocr-result').textContent = 'OCR Text: ' + data.text;&#10;        document.getElementById('news-text').value = data.text;&#10;      });&#10;  };&#10;}&#10;&#10;function handleHashChange() {&#10;  if (location.hash === '#verify') {&#10;    renderVerify();&#10;  } else {&#10;    renderFeed();&#10;  }&#10;}&#10;&#10;document.getElementById('feed-link').onclick = () =&gt; { location.hash = '#feed'; };&#10;document.getElementById('verify-link').onclick = () =&gt; { location.hash = '#verify'; };&#10;window.addEventListener('hashchange', handleHashChange);&#10;&#10;// Initial render&#10;handleHashChange();&#10;" />
              <option name="updatedContent" value="// app.js for FakeNews Platform (Vanilla JS)&#10;&#10;const mainContent = document.getElementById('main-content');&#10;&#10;function renderFeed() {&#10;  mainContent.innerHTML = `&#10;    &lt;h1&gt;Recommended News&lt;/h1&gt;&#10;    &lt;div id=&quot;articles&quot;&gt;&lt;/div&gt;&#10;  `;&#10;  fetch('http://localhost:8000/api/recommend')&#10;    .then(res =&gt; res.json())&#10;    .then(articles =&gt; {&#10;      const articlesDiv = document.getElementById('articles');&#10;      articlesDiv.innerHTML = articles.map(article =&gt; `&#10;        &lt;div class=&quot;card&quot;&gt;&#10;          &lt;h2&gt;${article.title}&lt;/h2&gt;&#10;          &lt;p&gt;${article.content}&lt;/p&gt;&#10;          ${article.url ? `&lt;a href=&quot;${article.url}&quot; target=&quot;_blank&quot;&gt;Read more&lt;/a&gt;` : ''}&#10;        &lt;/div&gt;&#10;      `).join('');&#10;    });&#10;}&#10;&#10;function renderVerify() {&#10;  mainContent.innerHTML = `&#10;    &lt;h1&gt;Verify News&lt;/h1&gt;&#10;    &lt;textarea id=&quot;news-text&quot; rows=&quot;5&quot; style=&quot;width:100%;margin-bottom:1rem;&quot;&gt;&lt;/textarea&gt;&#10;    &lt;div class=&quot;upload-box&quot;&gt;&#10;      &lt;input type=&quot;file&quot; id=&quot;ocr-file&quot; accept=&quot;image/*&quot;&gt;&#10;      &lt;p&gt;Upload an image to extract text (OCR)&lt;/p&gt;&#10;      &lt;button class=&quot;button&quot; id=&quot;ocr-only-btn&quot; style=&quot;margin-top:0.5rem;&quot;&gt;Read Text from Image&lt;/button&gt;&#10;    &lt;/div&gt;&#10;    &lt;button class=&quot;button&quot; id=&quot;classify-btn&quot;&gt;Classify&lt;/button&gt;&#10;    &lt;div id=&quot;verify-result&quot; style=&quot;margin-top:1rem;&quot;&gt;&lt;/div&gt;&#10;    &lt;div id=&quot;ocr-result&quot; style=&quot;margin-top:0.5rem;color:#6b7280;&quot;&gt;&lt;/div&gt;&#10;  `;&#10;  document.getElementById('classify-btn').onclick = () =&gt; {&#10;    const text = document.getElementById('news-text').value;&#10;    if (!text) return;&#10;    document.getElementById('verify-result').textContent = 'Processing...';&#10;    fetch('http://localhost:8000/api/classify', {&#10;      method: 'POST',&#10;      headers: { 'Content-Type': 'application/json' },&#10;      body: JSON.stringify({ text })&#10;    })&#10;      .then(res =&gt; res.json())&#10;      .then(result =&gt; {&#10;        document.getElementById('verify-result').innerHTML = `&#10;          &lt;div&gt;Label: &lt;b&gt;${result.label}&lt;/b&gt;&lt;/div&gt;&#10;          &lt;div&gt;Score: ${result.score.toFixed(3)}&lt;/div&gt;&#10;        `;&#10;      });&#10;  };&#10;  document.getElementById('ocr-only-btn').onclick = () =&gt; {&#10;    const fileInput = document.getElementById('ocr-file');&#10;    const file = fileInput.files[0];&#10;    if (!file) {&#10;      document.getElementById('ocr-result').textContent = 'Please select an image first.';&#10;      return;&#10;    }&#10;    // Log file info for debugging&#10;    console.log('Selected file:', file);&#10;    const formData = new FormData();&#10;    formData.append('file', file);&#10;    document.getElementById('ocr-result').textContent = 'Processing...';&#10;    fetch('http://localhost:8000/api/ocr', {&#10;      method: 'POST',&#10;      body: formData&#10;    })&#10;      .then(async res =&gt; {&#10;        if (!res.ok) {&#10;          const errorText = await res.text();&#10;          document.getElementById('ocr-result').textContent = 'Error: ' + errorText;&#10;          console.error('OCR error:', errorText);&#10;          return;&#10;        }&#10;        return res.json();&#10;      })&#10;      .then(data =&gt; {&#10;        if (!data) return;&#10;        document.getElementById('ocr-result').textContent = 'OCR Text: ' + data.text;&#10;        document.getElementById('news-text').value = data.text;&#10;        console.log('OCR response:', data);&#10;      })&#10;      .catch(err =&gt; {&#10;        document.getElementById('ocr-result').textContent = 'Error: ' + err;&#10;        console.error('Fetch error:', err);&#10;      });&#10;  };&#10;}&#10;&#10;function handleHashChange() {&#10;  if (location.hash === '#verify') {&#10;    renderVerify();&#10;  } else {&#10;    renderFeed();&#10;  }&#10;}&#10;&#10;document.getElementById('feed-link').onclick = () =&gt; { location.hash = '#feed'; };&#10;document.getElementById('verify-link').onclick = () =&gt; { location.hash = '#verify'; };&#10;window.addEventListener('hashchange', handleHashChange);&#10;&#10;// Initial render&#10;handleHashChange();" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/frontend2/index.html">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/frontend2/index.html" />
              <option name="originalContent" value="&lt;!DOCTYPE html&gt;&#10;&lt;html lang=&quot;en&quot;&gt;&#10;&lt;head&gt;&#10;  &lt;meta charset=&quot;UTF-8&quot;&gt;&#10;  &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;&#10;  &lt;title&gt;FakeNews Platform&lt;/title&gt;&#10;  &lt;link rel=&quot;stylesheet&quot; href=&quot;style.css&quot;&gt;&#10;&lt;/head&gt;&#10;&lt;body&gt;&#10;  &lt;div id=&quot;loader&quot; class=&quot;news-loader&quot;&gt;&#10;    &lt;div class=&quot;newspaper-icon&quot;&gt;&#10;      &lt;div class=&quot;newspaper-title&quot;&gt;NEWS&lt;/div&gt;&#10;      &lt;div class=&quot;newspaper-lines&quot;&gt;&#10;        &lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&#10;        &lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&#10;        &lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&#10;      &lt;/div&gt;&#10;    &lt;/div&gt;&#10;    &lt;div class=&quot;loader-text&quot;&gt;Loading the latest headlines...&lt;/div&gt;&#10;  &lt;/div&gt;&#10;  &lt;nav class=&quot;navbar&quot;&gt;&#10;    &lt;div class=&quot;brand&quot;&gt;FakeNews Platform&lt;/div&gt;&#10;    &lt;div class=&quot;nav-links&quot;&gt;&#10;      &lt;a href=&quot;#feed&quot; id=&quot;feed-link&quot;&gt;Feed&lt;/a&gt;&#10;      &lt;a href=&quot;#verify&quot; id=&quot;verify-link&quot;&gt;Verify&lt;/a&gt;&#10;    &lt;/div&gt;&#10;  &lt;/nav&gt;&#10;  &lt;main id=&quot;main-content&quot;&gt;&#10;    &lt;!-- Content will be injected here --&gt;&#10;  &lt;/main&gt;&#10;  &lt;script src=&quot;app.js&quot;&gt;&lt;/script&gt;&#10;&lt;/body&gt;&#10;&lt;/html&gt;&#10;" />
              <option name="updatedContent" value="&lt;!DOCTYPE html&gt;&#10;&lt;html lang=&quot;en&quot;&gt;&#10;&lt;head&gt;&#10;  &lt;meta charset=&quot;UTF-8&quot;&gt;&#10;  &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;&#10;  &lt;title&gt;FakeNews Platform&lt;/title&gt;&#10;  &lt;link rel=&quot;stylesheet&quot; href=&quot;style.css&quot;&gt;&#10;&lt;/head&gt;&#10;&lt;body&gt;&#10;  &lt;nav class=&quot;navbar&quot;&gt;&#10;    &lt;div class=&quot;brand&quot;&gt;FakeNews Platform&lt;/div&gt;&#10;    &lt;div class=&quot;nav-links&quot;&gt;&#10;      &lt;a href=&quot;#feed&quot; id=&quot;feed-link&quot;&gt;Feed&lt;/a&gt;&#10;      &lt;a href=&quot;#verify&quot; id=&quot;verify-link&quot;&gt;Verify&lt;/a&gt;&#10;    &lt;/div&gt;&#10;  &lt;/nav&gt;&#10;  &lt;main id=&quot;main-content&quot;&gt;&#10;    &lt;!-- Content will be injected here --&gt;&#10;  &lt;/main&gt;&#10;  &lt;script src=&quot;app.js&quot;&gt;&lt;/script&gt;&#10;&lt;/body&gt;&#10;&lt;/html&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/frontend2/style.css">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/frontend2/style.css" />
              <option name="updatedContent" value="/* Basic styles for FakeNews Platform */&#10;body {&#10;  font-family: Arial, sans-serif;&#10;  margin: 0;&#10;  background: #f3f4f6;&#10;}&#10;.navbar {&#10;  background: #1f2937;&#10;  color: #fff;&#10;  padding: 1rem 2rem;&#10;  display: flex;&#10;  justify-content: space-between;&#10;  align-items: center;&#10;}&#10;.nav-links a {&#10;  color: #fff;&#10;  margin-left: 1rem;&#10;  text-decoration: none;&#10;  font-weight: bold;&#10;}&#10;.nav-links a:hover {&#10;  text-decoration: underline;&#10;}&#10;main {&#10;  max-width: 700px;&#10;  margin: 2rem auto;&#10;  background: #fff;&#10;  border-radius: 8px;&#10;  box-shadow: 0 2px 8px rgba(0,0,0,0.05);&#10;  padding: 2rem;&#10;}&#10;.button {&#10;  background: #2563eb;&#10;  color: #fff;&#10;  border: none;&#10;  padding: 0.5rem 1.5rem;&#10;  border-radius: 4px;&#10;  cursor: pointer;&#10;  font-size: 1rem;&#10;}&#10;.button:disabled {&#10;  background: #a5b4fc;&#10;  cursor: not-allowed;&#10;}&#10;.card {&#10;  background: #f9fafb;&#10;  border-radius: 6px;&#10;  box-shadow: 0 1px 4px rgba(0,0,0,0.03);&#10;  padding: 1rem;&#10;  margin-bottom: 1rem;&#10;}&#10;.upload-box {&#10;  border: 2px dashed #9ca3af;&#10;  border-radius: 6px;&#10;  padding: 1rem;&#10;  text-align: center;&#10;  margin-bottom: 1rem;&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>